spring:
  application:
    name: order-service
  datasource:
    url: ${DATABASE_URL:jdbc:mysql://localhost:3306/order_service}
    username: root
    password: mysql
  jpa:
    hibernate:
      ddl-auto: none
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    template:
      default-topic: order-placed
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        schema:
          registry:
            url: ${SCHEMA_REGISTRY_URL:http://localhost:8085}
  config:
    import: optional:configserver:http://localhost:8888
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://192.168.1.13:8181/realms/spring-microservices-security-realm/protocol/openid-connect/certs
server:
  port: 8081

#Resilience4j properties
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        sliding-window-type: COUNT_BASED
        sliding-window-size: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state:
          seconds: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        minimum-number-of-calls: 5
  timelimiter:
    instances:
      inventory:
        timeout-duration:
          seconds: 3
  retry:
    instances:
      inventory:
        max-attempts: 3
        wait-duration:
          seconds: 3

management:
  observations:
    key-values:
      application: order-service